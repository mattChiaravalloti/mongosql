#[cfg(feature = "{feature}")]
#[test]
// tests with an if statement and a return inside are intended to end early
// before other cases are tested
// for example, if a test should not compile, there's no point in checking
// if the results are correct as there won't be any
pub fn {name}() {{
    use test_utils::*;
    let (client, test_file, catalog) = initialize_test();
    let test = test_file.tests.get({index}).unwrap();

    let default_db = "test".to_string();

    let db = test
        .current_db
        .as_ref()
        .unwrap_or_else(|| &default_db)
        .to_owned();

    let exclude_namespaces_option = if let Some(true) = test.exclude_namespaces {{
        ExcludeNamespacesOption::ExcludeNamespaces
    }} else {{
        ExcludeNamespacesOption::IncludeNamespaces
    }};

    let mut opts = SqlOptions::new(
            exclude_namespaces_option,
            mongosql::SchemaCheckingMode::Strict,
        );
    opts.allow_order_by_missing_columns = {allow_order_by_missing};
    let translation = mongosql::translate_sql(
        db.as_str(),
        test.query.as_str(),
        &catalog,
        opts,
    )
    .map_err(Error::Translation);

    if let Some(should_compile) = test.should_compile {{
        assert_eq!(
            should_compile,
            translation.is_ok(),
            "{{}}: unexpected compilation result",
            test.description
        );
        return;
    }}

    if let Some(parse_error) = test.parse_error.clone() {{
        assert!(
            translation
                .as_ref()
                .err()
                .unwrap()
                .to_string()
                .contains(&parse_error),
            "{{}}: unexpected parse result.\nexpected: {{}}\nactual: {{}}",
            test.description,
            parse_error,
            translation.unwrap_err().to_string()
        );
        return;
    }}
    if let Some(algebrize_error) = test.algebrize_error.clone() {{
        assert!(
            translation
                .as_ref()
                .err()
                .unwrap()
                .to_string()
                .contains(&algebrize_error),
            "{{}}: unexpected algebrize result.\nexpected: {{}}\nactual: {{}}",
            test.description,
            algebrize_error,
            translation.unwrap_err().to_string()
        );
        return;
    }}

    let result = run_query(&client, translation.unwrap()).unwrap();

    let type_compare = test.type_compare.unwrap_or(false);

    if let Some(expected_results) = test.result.clone() {{
        assert_eq!(
            expected_results.len(),
            result.len(),
            "{{}}: unexpected number of query results\nexpected results: {{:?}}\nactual results: {{:?}}",
            test.description,
            expected_results,
            result
        );

        if test.ordered.unwrap_or(false) {{
            for (index, (expected, actual)) in expected_results.iter().zip(result.iter()).enumerate() {{
                assert!(
                    // because NaN != NaN, we have to use custom comparison functions
                    compare_documents(expected, actual, type_compare),
                    "unexpected query result for {{}} at index {{}}, \nexpected: {{:?}}\nactual: {{:?}}",
                    test.description,
                    index,
                    expected,
                    actual
                );
            }}
        }} else {{
            for actual in result.iter() {{
                assert!(
                    expected_results.iter().any(|expected| {{
                        // because NaN != NaN, we have to use custom comparison functions
                        compare_documents(expected, actual, type_compare)
                    }}),
                    "unexpected query result for {{}}, \nexpected results: {{:?}}\nactual results: {{:?}}",
                    test.description,
                    expected_results,
                    actual
                );
            }}
        }}
    }}
}}
