#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(clippy::all)]
#![allow(non_snake_case, dead_code, static_mut_refs, unused_variables, unused_imports)]

use mongodb::{{
    bson::{{Bson, Document}},
    sync::Client,
}};
use mongosql::{{
    catalog::Catalog,
    options::{{ExcludeNamespacesOption, SqlOptions}},
    Translation,
}};
use sql_engines_common_test_infra::{{parse_yaml_test_file, YamlTestFile}};
use std::{{collections::HashSet, fs, io::Read, path::PathBuf, string::ToString, sync::Once}};
use test_utils::*;

static INIT: Once = Once::new();

pub fn initialize_test() -> (&'static Client, &'static YamlTestFile<IndexUsageTestCase>, &'static Catalog) {{
    static mut CLIENT: Option<Client> = None;
    static mut TEST_FILE: Option<YamlTestFile<IndexUsageTestCase>> = None;
    static mut CATALOG: Option<Catalog> = None;

    INIT.call_once(|| {{
        unsafe {{
            CLIENT = Some(Client::with_uri_str(MONGODB_URI.clone()).map_err(Error::CannotCreateMongoDBClient).unwrap());
            let test_file = parse_yaml_test_file("{path}").unwrap();
            let db_names = test_file.tests.iter().map(|t: &IndexUsageTestCase| t.options.current_db.clone()).collect();
            let catalog = get_catalog_for_dbs(CLIENT.as_ref().unwrap(), db_names);
            TEST_FILE = Some(test_file);
            CATALOG = Some(catalog);
        }}
    }});


    unsafe {{
        (CLIENT.as_ref().unwrap(), TEST_FILE.as_ref().unwrap(), CATALOG.as_ref().unwrap())
    }}
}}
