#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(clippy::all)]
#![allow(non_snake_case, dead_code, static_mut_refs, unused_variables, unused_imports)]

use mongodb::{{
    bson::Bson,
    sync::Client,
}};
use schema_derivation::{{ResultSetState, derive_schema_for_pipeline}};
use agg_ast::Namespace;
use mongosql::{{
    catalog::Catalog,
    json_schema,
    options::{{ExcludeNamespacesOption, SqlOptions}},
    schema::{{Document, Schema, Satisfaction}},
    Translation,
}};
use sql_engines_common_test_infra::{{parse_yaml_test_file, YamlTestFile}};
use std::{{collections::BTreeMap, fs, io::Read, path::PathBuf, string::ToString, sync::Once}};
use test_utils::{{Error, MONGODB_URI, get_schema_map_for_dbs, SchemaDerivationTestCase}};

static INIT: Once = Once::new();

pub fn initialize_test() -> (&'static YamlTestFile<SchemaDerivationTestCase>, &'static BTreeMap<String, BTreeMap<String, json_schema::Schema>>) {{
    static mut TEST_FILE: Option<YamlTestFile<SchemaDerivationTestCase>> = None;
    static mut CATALOG: Option<BTreeMap<String, BTreeMap<String, json_schema::Schema>>> = None;

    INIT.call_once(|| {{
        unsafe {{
            let client: Client = Client::with_uri_str(MONGODB_URI.clone()).map_err(Error::CannotCreateMongoDBClient).unwrap();
            let test_file = parse_yaml_test_file("{path}").unwrap();
            let db_names = test_file.tests.iter().flat_map(|t: &SchemaDerivationTestCase| {{
                let mut db_names = vec![];
                if let Some(current_db) = t.options.current_db.as_ref() {{
                    db_names.push(current_db.clone())
                }}

                if let Some(catalog_dbs) = t.options.catalog_dbs.as_ref() {{
                    db_names.append(&mut catalog_dbs.clone())
                }}

                db_names
            }}).collect();
            let catalog = get_schema_map_for_dbs(&client, db_names);
            TEST_FILE = Some(test_file);
            CATALOG = Some(catalog);
        }}
    }});

    unsafe {{
        (TEST_FILE.as_ref().unwrap(),
        CATALOG.as_ref().unwrap())
    }}
}}
