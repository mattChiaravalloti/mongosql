tests:
  - description: select with no where uses collection scan
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields"
    expected_utilization: COLL_SCAN

  - description: simple column EQ scalar filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a = 100"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "[100, 100]" ] }

  - description: simple column EQ scalar filter uses index scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a = 100"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "[100, 100]" ] }

  - description: simple column GT scalar filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a > 100"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "(100, MaxKey]" ] }

  - description: simple column GT scalar filter uses index scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a > 100"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "(100, MaxKey]" ] }

  - description: simple column GTE scalar filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a >= 100"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "[100, MaxKey]" ] }

  - description: simple column GTE scalar filter uses index scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a >= 100"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "[100, MaxKey]" ] }

  - description: simple column LT scalar filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a < 100"
    expected_utilization: IX_SCAN
    # the minimum bound is null (exclusive) since we expect this query to explicitly omit NULL/MISSING fields
    expected_index_bounds:
      - { "a": [ "(null, 100)" ] }

  - description: simple column LT scalar filter uses index scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a < 100"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "[MinKey, 100)" ] }

  - description: simple column LTE scalar filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a <= 100"
    expected_utilization: IX_SCAN
    # the minimum bound is null (exclusive) since we expect this query to explicitly omit NULL/MISSING fields
    expected_index_bounds:
      - { "a": [ "(null, 100]" ] }

  - description: simple column LTE scalar filter uses index scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a <= 100"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "[MinKey, 100]" ] }

  - description: simple column NE scalar filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a <> 100"
    expected_utilization: IX_SCAN
    # the minimum bound is null (exclusive) since we expect this query to explicitly omit NULL/MISSING fields
    expected_index_bounds:
      - { "a": [ "(null, MaxKey]" ] }

  - description: simple column NE scalar filter uses collection scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a <> 100"
    # this one cannot utilize an index scan since there are no beneficial bounds to help with this
    expected_utilization: COLL_SCAN

  - description: simple column BETWEEN scalar filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a BETWEEN 100 AND 300"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "[100, 300]" ] }

  - description: simple column BETWEEN scalar filter uses collection scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a BETWEEN 100 AND 300"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "[100, 300]" ] }

  - description: NOT does not impact index usage when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE NOT a >= 100"
    expected_utilization: IX_SCAN
    # the minimum bound is null (exclusive) since we expect this query to explicitly omit NULL/MISSING fields
    expected_index_bounds:
      - { "a": [ "(null, 100)" ] }

  - description: NOT does not impact index usage when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE NOT a >= 100"
    expected_utilization: IX_SCAN
    expected_index_bounds:
      - { "a": [ "[MinKey, 100)" ] }

  - description: simple column-column filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a = b"
    expected_utilization: IX_SCAN

  - description: simple column-column filter uses collection scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a = b"
    # this one cannot utilize an index scan since there are no indexed bounds referenced in this query
    # and since the fields are definitely non-null
    expected_utilization: COLL_SCAN

  - description: AND compound filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a > 100 AND b > 3000"
    expected_utilization: IX_SCAN

  - description: AND compound filter uses index scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a > 100 AND b > 3000"
    expected_utilization: IX_SCAN
    # It is unclear exactly why the index b_1 consistently wins here; perhaps it is considered more discerning
    # since there are more values of 'b' excluded by this index than values of 'a' excluded by a_1.

  - description: OR compound filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a > 100 OR b > 3000"
    expected_utilization: IX_SCAN

  - description: OR compound filter uses index scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a > 100 OR b > 3000"
    expected_utilization: IX_SCAN

  - description: complex filter uses index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a + b > 4"
    expected_utilization: IX_SCAN

  - description: complex filter uses collection scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT * FROM non_nullable_fields WHERE a + b > 4"
    # this one cannot utilize an index scan since there are no indexed bounds referenced in this query
    # and since the fields are definitely non-null
    expected_utilization: COLL_SCAN

  - description: SELECT field list does not impede index scan when fields are nullable
    current_db: index_usage_filter
    query: "SELECT a FROM nullable_fields WHERE a > 100"
    expected_utilization: IX_SCAN

  - description: SELECT field list does not impede index scan when fields are non-nullable
    current_db: index_usage_filter
    query: "SELECT a FROM non_nullable_fields WHERE a > 100"
    expected_utilization: IX_SCAN

  - description: LIKE filter uses index scan
    current_db: index_usage_filter
    query: "SELECT * FROM strings WHERE s LIKE 'abc'"
    expected_utilization: IX_SCAN

  - description: IS filter uses index scan
    current_db: index_usage_filter
    query: "SELECT * FROM mixed WHERE v IS NUMBER"
    expected_utilization: IX_SCAN

  - description: Unwound collection with filter on array field uses index
    current_db: index_usage_filter
    query: "SELECT * FROM UNWIND(arrays WITH PATH => v) WHERE v = 6"
    expected_utilization: IX_SCAN

  - description: Filter can be pushed into derived table and utilize index
    current_db: index_usage_filter
    query: "SELECT t1.* FROM (SELECT * FROM nullable_fields AS t1) AS t1 WHERE t1.a > 100"
    expected_utilization: IX_SCAN

  - description: Optimizer correctly runs to fixed point
    current_db: index_usage_filter
    query: "SELECT * FROM FLATTEN(UNWIND(arrays WITH PATH => v)) WHERE _id = 1"
    expected_utilization: IX_SCAN

  - description: subquery filter should not prevent index usage
    current_db: index_usage_filter
    query: "SELECT * FROM nullable_fields WHERE a > 100 AND b IN (SELECT b FROM non_nullable_fields WHERE a < 300)"
    expected_utilization: IX_SCAN
